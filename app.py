import json

import streamlit as st

import agents.prompts as prompt_defaults
from core.orchestrator import TherapyOrchestrator
from services.prompt_store import PROMPT_KEYS, PromptStore


PROMPT_LABELS = {
    "router": "–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä",
    "dbt": "DBT",
    "ifs": "IFS",
    "tre": "TRE",
    "memory": "–ü–∞–º—è—Ç—å",
}

DEFAULT_PROMPTS = {
    "router": prompt_defaults.ROUTER_PROMPT,
    "dbt": prompt_defaults.DBT_PROMPT,
    "ifs": prompt_defaults.IFS_PROMPT,
    "tre": prompt_defaults.TRE_PROMPT,
    "memory": prompt_defaults.MEMORY_PROMPT,
}

st.set_page_config(
    page_title="–¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∞—è –°–∏—Å—Ç–µ–º–∞",
    page_icon="üß†",
    layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'prompt_store' not in st.session_state:
    st.session_state.prompt_store = PromptStore()

if 'orchestrator' not in st.session_state:
    st.session_state.orchestrator = TherapyOrchestrator(
        use_memory=True,
        prompt_store=st.session_state.prompt_store,
    )
    st.session_state.session_id = st.session_state.orchestrator.start_session()
    st.session_state.messages = []

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üß† –ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è –¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∞—è –°–∏—Å—Ç–µ–º–∞")
st.warning("‚ö†Ô∏è –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è - –Ω–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç
prompt_store = st.session_state.prompt_store

with st.sidebar:
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    st.caption(f"Google Sheets: {prompt_store.status()}")

    if prompt_store.enabled:
        overrides = prompt_store.load_all()
        current_prompts = dict(DEFAULT_PROMPTS)
        for key, record in overrides.items():
            if record.prompt:
                current_prompts[key] = record.prompt

        with st.form("prompt_editor"):
            st.markdown("**üõ†Ô∏è –†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤**")
            edited_prompts = {}
            for key in PROMPT_KEYS:
                label = PROMPT_LABELS.get(key, key.upper())
                edited_prompts[key] = st.text_area(
                    label,
                    current_prompts.get(key, DEFAULT_PROMPTS[key]),
                    height=160,
                )

            default_name = st.session_state.get("prompt_editor_name", "")
            editor_name = st.text_input("–ò–º—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", value=default_name)
            submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã")

        if submitted:
            st.session_state["prompt_editor_name"] = editor_name
            normalized_name = editor_name.strip() or None
            changes_made = False
            errors = []

            for key, new_value in edited_prompts.items():
                existing_record = overrides.get(key)
                existing_value = (
                    existing_record.prompt if existing_record and existing_record.prompt else DEFAULT_PROMPTS[key]
                )
                if new_value != existing_value:
                    success = prompt_store.update_prompt(key, new_value, updated_by=normalized_name)
                    if not success:
                        errors.append(key)
                        break
                    changes_made = True

            if errors:
                readable = ", ".join(PROMPT_LABELS.get(key, key) for key in errors)
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç(—ã): {readable}")
            elif changes_made:
                st.session_state.orchestrator.refresh_prompts()
                st.success("–ü—Ä–æ–º–ø—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                st.rerun()
            else:
                st.info("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    else:
        st.info("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets –≤ secrets.toml.")

    st.divider()

# –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤
with st.expander("‚ÑπÔ∏è –û —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–¥—Ö–æ–¥–∞—Ö"):
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        ### DBT (–î–∏–∞–ª–µ–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è)
        - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è
        - –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫ –¥–∏—Å—Ç—Ä–µ—Å—Å—É
        - –ú–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        - –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å
        """)
    
    with col2:
        st.markdown("""
        ### IFS (–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–µ–º–µ–π–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã)
        - –†–∞–±–æ—Ç–∞ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —á–∞—Å—Ç—è–º–∏
        - –°–∞–º–æ–ª–∏–¥–µ—Ä—Å—Ç–≤–æ
        - –ò—Å—Ü–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞–≤–º
        - –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≥–∞—Ä–º–æ–Ω–∏—è
        """)
    
    with col3:
        st.markdown("""
        ### TRE (–í—ã—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–≤–º—ã)
        - –¢–µ–ª–µ—Å–Ω–∞—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å
        - –†–∞–±–æ—Ç–∞ —Å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º
        - –°–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã
        - –ù–µ–π—Ä–æ–≥–µ–Ω–Ω—ã–π —Ç—Ä–µ–º–æ—Ä
        """)

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("üí¨ –ë–µ—Å–µ–¥–∞")
    
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    messages_container = st.container(height=400)
    
    with messages_container:
        for msg in st.session_state.messages:
            with st.chat_message(msg["role"]):
                st.write(msg["content"])
                if msg.get("metadata"):
                    st.caption(
                        f"üîç {msg['metadata']['approach']} "
                        f"({msg['metadata']['confidence']:.0%}) - "
                        f"{msg['metadata']['reasoning']}"
                    )
    
    # –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
    if prompt := st.chat_input("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏..."):
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.messages.append({
            "role": "user",
            "content": prompt
        })
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with messages_container:
            with st.chat_message("user"):
                st.write(prompt)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–æ–≤
        with st.spinner("–ê–Ω–∞–ª–∏–∑ –∏ –≤—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥–∞..."):
            result = st.session_state.orchestrator.process_message(prompt)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        st.session_state.messages.append({
            "role": "assistant",
            "content": result["response"],
            "metadata": {
                "approach": result["approach"],
                "confidence": result["confidence"],
                "reasoning": result["reasoning"]
            }
        })
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        with messages_container:
            with st.chat_message("assistant"):
                st.write(result["response"])
                st.caption(
                    f"üîç {result['approach']} "
                    f"({result['confidence']:.0%}) - "
                    f"{result['reasoning']}"
                )
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        st.rerun()

with col2:
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏")
    
    # –°—á–µ—Ç—á–∏–∫–∏ –ø–æ–¥—Ö–æ–¥–æ–≤
    approaches_count = {"DBT": 0, "IFS": 0, "TRE": 0}
    for msg in st.session_state.messages:
        if msg.get("metadata") and msg["metadata"].get("approach"):
            approaches_count[msg["metadata"]["approach"]] += 1
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    st.metric("–°–æ–æ–±—â–µ–Ω–∏–π", len(st.session_state.messages))
    
    for approach, count in approaches_count.items():
        emoji = {"DBT": "üßò", "IFS": "üë•", "TRE": "üí™"}
        st.metric(f"{emoji.get(approach, '')} {approach}", count)
    
    st.divider()
    
    # –ò–Ω—Å–∞–π—Ç—ã
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Å–∞–π—Ç—ã"):
        insights = st.session_state.orchestrator.get_session_insights()
        
        if insights:
            st.subheader("üí° –ò–Ω—Å–∞–π—Ç—ã —Å–µ—Å—Å–∏–∏")
            
            for insight in insights[:5]:
                insight_type = {
                    "insight": "üí°",
                    "pattern": "üîÑ",
                    "trigger": "‚ö°",
                    "resource": "üí™"
                }.get(insight['type'], "üìù")
                
                with st.expander(
                    f"{insight_type} {insight['type'].title()} - {insight['approach']}"
                ):
                    st.write(insight['insight'])
        else:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Å–∞–π—Ç–æ–≤")

# –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏
if st.sidebar.button("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
    history = st.session_state.orchestrator.get_session_history()
    st.sidebar.download_button(
        "–°–∫–∞—á–∞—Ç—å JSON",
        data=json.dumps(history, ensure_ascii=False, indent=2),
        file_name=f"session_{st.session_state.session_id}.json",
        mime="application/json"
    )
